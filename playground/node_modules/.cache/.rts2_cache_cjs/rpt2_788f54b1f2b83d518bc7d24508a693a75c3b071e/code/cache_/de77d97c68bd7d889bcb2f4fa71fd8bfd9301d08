{"code":"import React, { useMemo, useEffect, useState } from \"react\";\r\nimport { StyledTabList, StyledTab, StyledTabPanels, StyledTabPanel, StyledTabs, } from \"../TabStyles\";\r\nimport Console from \"./Console\";\r\nimport Frame from \"./Frame\";\r\nconst Result = ({ id, snippet, presets, defaultTab, transformJs, width, }) => {\r\n    const [logs, setLogs] = useState([]);\r\n    const tabs = useMemo(() => [\r\n        { name: \"Result\", value: \"result\" },\r\n        { name: \"Console\", value: \"console\" },\r\n    ], []);\r\n    useEffect(() => {\r\n        function waitForMessage() {\r\n            if (typeof window !== \"undefined\") {\r\n                window.addEventListener(\"message\", (data) => {\r\n                    if (data.data.source === `frame-${id}` &&\r\n                        data.data.message.type === \"log\") {\r\n                        setLogs((prevLogs) => [...prevLogs, ...data.data.message.data]);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        waitForMessage();\r\n    }, [id]);\r\n    return (React.createElement(StyledTabs, { defaultIndex: tabs.findIndex((tab) => tab.value === defaultTab), style: { width: width } },\r\n        React.createElement(StyledTabList, null, tabs.map((tab) => (React.createElement(StyledTab, { key: tab.value }, tab.name)))),\r\n        React.createElement(StyledTabPanels, null,\r\n            React.createElement(StyledTabPanel, null,\r\n                React.createElement(Frame, { id: id, snippet: snippet, transformJs: transformJs, presets: presets })),\r\n            React.createElement(StyledTabPanel, null,\r\n                React.createElement(Console, { logs: logs })))));\r\n};\r\nexport default Result;\r\n//# sourceMappingURL=index.js.map","references":["/Users/bidishamondal/Desktop/Projects/frontend-code-playground/node_modules/@types/react/index.d.ts","/Users/bidishamondal/Desktop/Projects/frontend-code-playground/playground/src/TabStyles.tsx","/Users/bidishamondal/Desktop/Projects/frontend-code-playground/playground/src/types.ts","/Users/bidishamondal/Desktop/Projects/frontend-code-playground/playground/src/Result/Console.tsx","/Users/bidishamondal/Desktop/Projects/frontend-code-playground/playground/src/Result/Frame.tsx"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Result/index.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,EAAE,EAAM,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEhE,OAAO,EACL,aAAa,EACb,SAAS,EACT,eAAe,EACf,cAAc,EACd,UAAU,GACX,MAAM,cAAc,CAAC;AAEtB,OAAO,OAAO,MAAM,WAAW,CAAC;AAChC,OAAO,KAAK,MAAM,SAAS,CAAC;AAW5B,MAAM,MAAM,GAAe,CAAC,EAC1B,EAAE,EACF,OAAO,EACP,OAAO,EACP,UAAU,EACV,WAAW,EACX,KAAK,GACN,EAAE,EAAE;IACH,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAY,EAAE,CAAC,CAAC;IAChD,MAAM,IAAI,GAAwC,OAAO,CACvD,GAAG,EAAE,CAAC;QACJ,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAuB,EAAE;QAClD,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAwB,EAAE;KACrD,EACD,EAAE,CACH,CAAC;IACF,SAAS,CAAC,GAAG,EAAE;QACb,SAAS,cAAc;YACrB,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;oBAC1C,IACE,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE,EAAE;wBAClC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK,EAChC;wBACA,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;qBACjE;gBACH,CAAC,CAAC,CAAC;aACJ;QACH,CAAC;QACD,cAAc,EAAE,CAAC;IACnB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACT,OAAO,CACL,oBAAC,UAAU,IACT,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,KAAK,UAAU,CAAC,EAC/D,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;QAEvB,oBAAC,aAAa,QACX,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CACjB,oBAAC,SAAS,IAAC,GAAG,EAAE,GAAG,CAAC,KAAK,IAAG,GAAG,CAAC,IAAI,CAAa,CAClD,CAAC,CACY;QAChB,oBAAC,eAAe;YACd,oBAAC,cAAc;gBACb,oBAAC,KAAK,IACJ,EAAE,EAAE,EAAE,EACN,OAAO,EAAE,OAAO,EAChB,WAAW,EAAE,WAAW,EACxB,OAAO,EAAE,OAAO,GAChB,CACa;YACjB,oBAAC,cAAc;gBACb,oBAAC,OAAO,IAAC,IAAI,EAAE,IAAI,GAAI,CACR,CACD,CACP,CACd,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,MAAM,CAAC\"}","dts":{"name":"/Users/bidishamondal/Desktop/Projects/frontend-code-playground/playground/dist/Result/index.d.ts","writeByteOrderMark":false,"text":"import { FC } from \"react\";\r\nimport { ISnippet, IResultTabs } from \"../types\";\r\ninterface IProps {\r\n    id: string | number;\r\n    snippet: ISnippet;\r\n    defaultTab: IResultTabs;\r\n    transformJs: boolean;\r\n    presets: string[];\r\n    width: number;\r\n}\r\ndeclare const Result: FC<IProps>;\r\nexport default Result;\r\n"}}

{"code":"import { useState, useEffect, useCallback } from \"react\";\r\nfunction useDrag({ containerRef, dividerRef, dividerWidth }) {\r\n    const [width, setWidth] = useState(0);\r\n    const [containerRect, setContainerRect] = useState(null);\r\n    useEffect(() => {\r\n        const containerEl = containerRef.current;\r\n        if (containerEl) {\r\n            const fullWidth = containerEl.clientWidth;\r\n            const containerRect = containerEl.getBoundingClientRect();\r\n            setContainerRect(containerRect);\r\n            setWidth(fullWidth / 2);\r\n        }\r\n    }, []);\r\n    const keepDragging = useCallback((event) => {\r\n        const { clientX } = event;\r\n        if (containerRect) {\r\n            setWidth(clientX - containerRect.left);\r\n        }\r\n    }, [containerRect]);\r\n    const stopDrag = useCallback(() => {\r\n        document.removeEventListener(\"mousemove\", keepDragging);\r\n        document.removeEventListener(\"mouseup\", stopDrag);\r\n    }, [keepDragging]);\r\n    const startDrag = useCallback(() => {\r\n        document.addEventListener(\"mousemove\", keepDragging);\r\n        document.addEventListener(\"mouseup\", stopDrag);\r\n    }, [keepDragging, stopDrag]);\r\n    useEffect(() => {\r\n        const dividerEl = dividerRef.current;\r\n        if (dividerEl) {\r\n            dividerEl.addEventListener(\"mousedown\", startDrag);\r\n        }\r\n        return () => {\r\n            if (dividerEl) {\r\n                dividerEl.removeEventListener(\"mousedown\", startDrag);\r\n            }\r\n        };\r\n    }, [startDrag]);\r\n    return {\r\n        leftWidth: width,\r\n        rightWidth: containerRect ? containerRect.width - width - dividerWidth : 0,\r\n    };\r\n}\r\nexport default useDrag;\r\n//# sourceMappingURL=useDrag.js.map","references":["/Users/bidishamondal/Desktop/Projects/frontend-code-playground/node_modules/@types/react/index.d.ts"],"map":"{\"version\":3,\"file\":\"useDrag.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Draggable/useDrag.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAa,MAAM,OAAO,CAAC;AAQpE,SAAS,OAAO,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,YAAY,EAAU;IACjE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACtC,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAAiB,IAAI,CAAC,CAAC;IAEzE,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC;QACzC,IAAI,WAAW,EAAE;YACf,MAAM,SAAS,GAAG,WAAW,CAAC,WAAW,CAAC;YAC1C,MAAM,aAAa,GAAG,WAAW,CAAC,qBAAqB,EAAE,CAAC;YAC1D,gBAAgB,CAAC,aAAa,CAAC,CAAC;YAChC,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;SACzB;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,YAAY,GAAG,WAAW,CAC9B,CAAC,KAAiB,EAAE,EAAE;QACpB,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAC1B,IAAI,aAAa,EAAE;YACjB,QAAQ,CAAC,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;SACxC;IACH,CAAC,EACD,CAAC,aAAa,CAAC,CAChB,CAAC;IACF,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;QAChC,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QACxD,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACpD,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IACnB,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE;QACjC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QACrD,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACjD,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC7B,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC;QACrC,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;SACpD;QACD,OAAO,GAAG,EAAE;YACV,IAAI,SAAS,EAAE;gBACb,SAAS,CAAC,mBAAmB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;aACvD;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,OAAO;QACL,SAAS,EAAE,KAAK;QAChB,UAAU,EAAE,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,GAAG,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;KAC3E,CAAC;AACJ,CAAC;AAED,eAAe,OAAO,CAAC\"}","dts":{"name":"/Users/bidishamondal/Desktop/Projects/frontend-code-playground/playground/dist/Draggable/useDrag.d.ts","writeByteOrderMark":false,"text":"import { RefObject } from \"react\";\r\ninterface IProps {\r\n    containerRef: RefObject<HTMLDivElement | null>;\r\n    dividerRef: RefObject<HTMLDivElement | null>;\r\n    dividerWidth: number;\r\n}\r\ndeclare function useDrag({ containerRef, dividerRef, dividerWidth }: IProps): {\r\n    leftWidth: number;\r\n    rightWidth: number;\r\n};\r\nexport default useDrag;\r\n"}}
